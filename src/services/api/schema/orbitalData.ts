import { z, string, number, object, coerce } from "zod";

export const OrbitalDataSchema = object({
  orbit_id: string(),
  orbit_determination_date: string(),
  first_observation_date: string(),
  last_observation_date: string(),
  data_arc_in_days: number(),
  observations_used: number(),
  orbit_uncertainty: coerce.number(),
  minimum_orbit_intersection: coerce.number(),
  jupiter_tisserand_invariant: coerce.number(),
  epoch_osculation: coerce.number(),
  eccentricity: coerce.number(),
  semi_major_axis: coerce.number(),
  inclination: coerce.number(),
  ascending_node_longitude: coerce.number(),
  orbital_period: coerce.number(),
  perihelion_distance: coerce.number(),
  perihelion_argument: coerce.number(),
  aphelion_distance: coerce.number(),
  perihelion_time: coerce.number(),
  mean_anomaly: coerce.number(),
  mean_motion: coerce.number(),
  equinox: string(),
  orbit_class: object({
    orbit_class_type: string(),
    orbit_class_description: string(),
    orbit_class_range: string(),
  }),
}).transform((o) => ({
  orbitId: o.orbit_id,
  orbitDeterminationDate: o.orbit_determination_date,
  firstObservationDate: o.first_observation_date,
  lastObservationDate: o.last_observation_date,
  dataArcInDays: o.data_arc_in_days,
  observationsUsed: o.observations_used,
  orbitUncertainty: o.orbit_uncertainty,
  minimumOrbitIntersection: o.minimum_orbit_intersection,
  jupiterTisserandInvariant: o.jupiter_tisserand_invariant,
  epochOsculation: o.epoch_osculation,
  eccentricity: o.eccentricity,
  semiMajorAxis: o.semi_major_axis,
  inclination: o.inclination,
  ascendingNodeLongitude: o.ascending_node_longitude,
  orbitalPeriod: o.orbital_period,
  perihelionDistance: o.perihelion_distance,
  perihelionArgument: o.perihelion_argument,
  aphelionDistance: o.aphelion_distance,
  perihelionTime: o.perihelion_time,
  meanAnomaly: o.mean_anomaly,
  meanMotion: o.mean_motion,
  equinox: o.equinox,
  orbitClass: {
    orbitclassType: o.orbit_class.orbit_class_type,
    orbitClassDescription: o.orbit_class.orbit_class_description,
    orbitClassRange: o.orbit_class.orbit_class_range,
  },
}));

export type OrbitalDataInterface = z.infer<typeof OrbitalDataSchema>;
